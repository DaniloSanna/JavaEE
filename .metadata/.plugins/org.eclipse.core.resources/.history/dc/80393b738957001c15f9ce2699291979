package filter;

import java.io.IOException;

import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.FilterConfig;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.annotation.WebFilter;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;

@WebFilter(urlPatterns = {"/principal/*"}) //Intercepta todas as requisições que vierem do projeto ou mapeamento

public class FilterAutenticacao implements Filter {

    public FilterAutenticacao() {
    }

	//Encerra os processos quando o servidor for interrompida.
    public void destroy() {
	}

	//Intercepta todas as requisições do projeto.
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
		HttpServletRequest req = (HttpServletRequest) request;
		HttpSession session = req.getSession();
		String usuarioLogado = (String) session.getAttribute("login");			
		
		// URL que esta sendo acessada.
		String urlParaAtutenticar = req.getServletPath();
		
		
		//Validar se esta logado, caso não, direcine para tela de login.
		if(usuarioLogado == null || (usuarioLogado != null && usuarioLogado.isEmpty()) 
				&& !urlParaAtutenticar.contains("ServLetLogin") ) {
			
			RequestDispatcher redireciona = request.getRequestDispatcher("");
		}
		
		
    	chain.doFilter(request, response);
	}

	//Inicia os processos e recursos quando o servidor carrega o projeto
    public void init(FilterConfig fConfig) throws ServletException {
	}

}
